""" Script that splits the val data from a folds directory with a tree:
    folds
        foldset{1,2,3,...,N}/val
        norm_foldset{1,2,3,...,N}/val
    The output data generated by write_folds has the same tree structure,
    with only the 'folds' parent directory being named differently.
    """
class MakeFoldsFromVal:
    def __init__(self):
        pass

    def read_folds(self,fn,norm_fn):
        train_folds,norm_train_folds,val_folds,norm_val_folds=[],[],[],[]
        for i in range(4):
            fold_fn     =fn+str(i+1)+'/'
            norm_fold_fn=norm_fn+str(i+1)+'/'
            with open(fold_fn+"val") as f: val=[line.rstrip('\n') for line in f]
            with open(norm_fold_fn+"val") as f: norm_val=[line.rstrip('\n') for line in f]
            # Splice and append folds
            train = val[:int(3*len(val)/4)]
            val = val[int(3*len(val)/4):]
            train_folds.append(train)
            val_folds.append(val)
            # Splice and append norm folds
            norm_train = norm_val[:int(3*len(norm_val)/4)]
            norm_val = norm_val[int(3*len(norm_val)/4):]
            norm_train_folds.append(norm_train)
            norm_val_folds.append(norm_val)
        self.train_folds,self.val_folds,self.norm_train_folds,self.norm_val_folds=train_folds,val_folds,norm_train_folds,norm_val_folds

    def write_folds(self,fn="folds_enc_dec/foldset",norm_fn="folds_enc_dec/norm_foldset"):
        for i in range(4):
            fold_fn     =fn+str(i+1)+'/'
            norm_fold_fn=norm_fn+str(i+1)+'/'
            # Write train data
            with open(fold_fn+"train",'w') as f:
                for train in self.train_folds[i]: f.write(train+'\n')
            with open(norm_fold_fn+"train",'w') as f:
                for norm_train in self.norm_train_folds[i]: f.write(norm_train+'\n')
            # Write val data
            with open(fold_fn+"val",'w') as f:
                for val in self.val_folds[i]: f.write(val+'\n')
            with open(norm_fold_fn+"val",'w') as f:
                for norm_val in self.norm_val_folds[i]: f.write(norm_val+'\n')

if __name__ == "__main__":
    make_train_from_val=MakeFoldsFromVal()
    make_train_from_val.read_folds(fn="folds/foldset",norm_fn="folds/norm_foldset")
    make_train_from_val.write_folds(fn="folds_enc_dec/foldset",norm_fn="folds_enc_dec/norm_foldset")

